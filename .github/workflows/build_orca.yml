on:
    workflow_call:
      inputs:
        cache-key:
          required: true
          type: string
        cache-path:
          required: true
          type: string
        os:
          required: true
          type: string
        arch:
          required: false
          type: string

jobs:
  build_orca:
    name: Build OrcaSlicer
    runs-on: ${{ inputs.os }}
    env:
      date:
      ver:

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get the version and date on Ubuntu and macOS
        if: inputs.os != 'windows-latest'
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            ver="nightly$(date +'%y%m%d')"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            ver="PR${{ github.event.number }}"
          else
            ver=$(grep 'set(SoftFever_VERSION' version.inc | cut -d '"' -f2)
            ver=V$ver
          fi
          echo "ver=$ver" >> $GITHUB_ENV
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV
        shell: bash

      - name: Get the version and date on Windows
        if: inputs.os == 'windows-latest'
        run: |
          $date = Get-Date -Format 'yyyyMMdd'
          $ref = "${{ github.ref }}"
          $eventName = "${{ github.event_name }}"
          $prNumber = "${{ github.event.number }}"
      
          if ($ref -eq 'refs/heads/main') {
              $ver = "nightly" + $date.Substring(2)
          } elseif ($eventName -eq 'pull_request') {
              $ver = "PR" + $prNumber
          } else {
              $versionContent = Get-Content version.inc -Raw
              if ($versionContent -match 'set\(SoftFever_VERSION "(.*?)"\)') {
                  $ver = $matches[1]
              }
              ver = "V$ver"
          }
      
          echo "ver=$ver" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "date=$date" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "date: ${{ env.date }} version: ${{ env.ver }}"
        shell: pwsh
      
      - name: load cached deps
        uses: actions/cache@v3
        with:
          path: ${{ inputs.cache-path }}
          key: ${{ inputs.cache-key }}
        
#   Mac
      - name: Install tools mac
        if: inputs.os == 'macos-12'
        run: |
          brew install cmake git gettext zstd tree
          mkdir -p ${{ github.workspace }}/deps/build_${{inputs.arch}}
          mkdir -p ${{ github.workspace }}/deps/build_${{inputs.arch}}/OrcaSlicer_dep_${{inputs.arch}}

      - name: Build slicer mac
        if: inputs.os == 'macos-12'
        working-directory: ${{ github.workspace }}
        run: |
          ./build_release_macos.sh -s -n -a ${{inputs.arch}}

 # Thanks to RaySajuuk, it's working now
      - name: Sign app and notary
        if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')) && inputs.os == 'macos-12'
        working-directory: ${{ github.workspace }}
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          CERTIFICATE_ID: ${{ secrets.MACOS_CERTIFICATE_ID }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P $P12_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $P12_PASSWORD $KEYCHAIN_PATH
          codesign --deep --force --verbose --options runtime --timestamp --entitlements ${{ github.workspace }}/scripts/disable_validation.entitlements --sign "$CERTIFICATE_ID" ${{ github.workspace }}/build_${{inputs.arch}}/OrcaSlicer/OrcaSlicer.app
          ln -s /Applications ${{ github.workspace }}/build_${{inputs.arch}}/OrcaSlicer/Applications
          hdiutil create -volname "OrcaSlicer" -srcfolder ${{ github.workspace }}/build_${{inputs.arch}}/OrcaSlicer -ov -format UDZO OrcaSlicer_Mac_${{inputs.arch}}_${{ env.ver }}.dmg
          codesign --deep --force --verbose --options runtime --timestamp --entitlements ${{ github.workspace }}/scripts/disable_validation.entitlements --sign "$CERTIFICATE_ID" OrcaSlicer_Mac_${{inputs.arch}}_${{ env.ver }}.dmg
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "${{ secrets.APPLE_DEV_ACCOUNT }}" --team-id "${{ secrets.TEAM_ID }}" --password "${{ secrets.APP_PWD }}"
          xcrun notarytool submit "OrcaSlicer_Mac_${{inputs.arch}}_${{ env.ver }}.dmg" --keychain-profile "notarytool-profile" --wait
          xcrun stapler staple OrcaSlicer_Mac_${{inputs.arch}}_${{ env.ver }}.dmg

      - name: Create DMG without notary
        if: github.ref != 'refs/heads/main' && inputs.os == 'macos-12'
        working-directory: ${{ github.workspace }}
        run: |
          ln -s /Applications ${{ github.workspace }}/build_${{inputs.arch}}/OrcaSlicer/Applications
          hdiutil create -volname "OrcaSlicer" -srcfolder ${{ github.workspace }}/build_${{inputs.arch}}/OrcaSlicer -ov -format UDZO OrcaSlicer_Mac_${{inputs.arch}}_${{ env.ver }}.dmg

      - name: Upload artifacts mac
        if: inputs.os == 'macos-12'
        uses: actions/upload-artifact@v3
        with:
          name: OrcaSlicer_Mac_${{inputs.arch}}_${{ env.ver }}
          path: ${{ github.workspace }}/OrcaSlicer_Mac_${{inputs.arch}}_${{ env.ver }}.dmg

# Windows
      - name: setup MSVC
        if: inputs.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.1

      - name: Install nsis
        if: inputs.os == 'windows-latest'
        run: |
          dir "C:/Program Files (x86)/Windows Kits/10/Include"
          choco install nsis

      - name: Build slicer Win
        if: inputs.os == 'windows-latest'
        working-directory: ${{ github.workspace }}
        run: .\build_release_vs2022.bat slicer

      - name: Create installer Win
        if: inputs.os == 'windows-latest'
        working-directory: ${{ github.workspace }}/build
        run: |
          cpack -G NSIS

      - name: Pack app
        if: inputs.os == 'windows-latest'
        working-directory: ${{ github.workspace }}/build
        shell: cmd
        run: '"C:/Program Files/7-Zip/7z.exe" a -tzip OrcaSlicer_Windows_${{ env.ver }}_portable.zip ${{ github.workspace }}/build/OrcaSlicer'

      - name: Pack PDB
        if: inputs.os == 'windows-latest'
        working-directory: ${{ github.workspace }}/build/src/Release
        shell: cmd
        run: '"C:/Program Files/7-Zip/7z.exe" a -m0=lzma2 -mx9 Debug_PDB_${{ env.ver }}_for_developers_only.7z  *.pdb'
          
      - name: Upload artifacts Win zip
        if: inputs.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: OrcaSlicer_Windows_${{ env.ver }}_portable
          path: ${{ github.workspace }}/build/OrcaSlicer_Windows_${{ env.ver }}_portable.zip

      - name: Upload artifacts Win installer
        if: inputs.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: OrcaSlicer_Windows_${{ env.ver }}
          path: ${{ github.workspace }}/build/OrcaSlicer*.exe

      - name: Upload artifacts Win PDB
        if: inputs.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: PDB
          path: ${{ github.workspace }}/build/src/Release/Debug_PDB_${{ env.ver }}_for_developers_only.7z

# Ubuntu
      - name: Install dependencies
        if: inputs.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf build-essential cmake curl eglexternalplatform-dev \
          extra-cmake-modules file git libcairo2-dev libcurl4-openssl-dev libdbus-1-dev libglew-dev libglu1-mesa-dev \
          libglu1-mesa-dev libgstreamer1.0-dev libgstreamerd-3-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev \
          libgtk-3-dev libgtk-3-dev libmspack-dev libosmesa6-dev libsecret-1-dev libsoup2.4-dev libssl-dev libudev-dev libwayland-dev \
          libwebkit2gtk-4.0-dev libxkbcommon-dev locales locales-all m4 pkgconf sudo wayland-protocols wget

      - name: Install dependencies from BuildLinux.sh
        if: inputs.os == 'ubuntu-20.04'
        shell: bash
        run: sudo ./BuildLinux.sh -ur

      - name: Fix permissions
        if: inputs.os == 'ubuntu-20.04'
        shell: bash
        run: sudo chown $USER -R ./

      - name: Build slicer
        if: inputs.os == 'ubuntu-20.04'
        shell: bash
        run: |
          ./BuildLinux.sh -isr
          chmod +x ./build/OrcaSlicer_ubu64.AppImage
        
      - name: Upload artifacts Ubuntu
        if: inputs.os == 'ubuntu-20.04'
        uses: actions/upload-artifact@v3
        with:
          name: OrcaSlicer_Linux_${{ env.ver }}
          path: './build/OrcaSlicer_ubu64.AppImage'